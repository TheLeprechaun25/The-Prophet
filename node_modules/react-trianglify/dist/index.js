function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var trianglify = _interopDefault(require('trianglify'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function Trianglify(_ref) {
  var _ref$output = _ref.output,
      output = _ref$output === void 0 ? 'canvas' : _ref$output,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 600 : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? 400 : _ref$height,
      props = _objectWithoutPropertiesLoose(_ref, ["output", "width", "height"]);

  var ref = React.useRef();

  var _useState = React.useState({}),
      forceUpdate = _useState[1];

  var svgOutput = React.useCallback(function (generateOutput) {
    generateOutput(ref.current);
  }, []);
  var canvasOutput = React.useCallback(function (generateOutput) {
    var canvas = generateOutput();
    var ctx = ref.current.getContext('2d');
    ctx.drawImage(canvas, 0, 0, width, height);
  }, []);
  var choosenOutput = React.useMemo(function () {
    return {
      canvas: {
        output: 'toCanvas',
        method: canvasOutput
      },
      svg: {
        output: 'toSVG',
        method: svgOutput
      }
    };
  }, []);
  React.useEffect(function () {
    var pattern = trianglify(_extends({
      width: width,
      height: height
    }, props));
    var generateOutput = pattern[choosenOutput[output].output];

    if (!generateOutput) {
      throw new Error('Invalid output. Only "canvas" or "svg" are allowed.');
    }

    var outputMethod = choosenOutput[output].method(generateOutput);
    forceUpdate({});
  }, []);
  var Tag = output;
  return /*#__PURE__*/React__default.createElement(Tag, {
    ref: ref,
    width: width,
    height: height
  });
}

module.exports = Trianglify;
//# sourceMappingURL=index.js.map
